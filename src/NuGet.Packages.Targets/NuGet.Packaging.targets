<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" TreatAsLocalProperty="OutDir;IntermediateOutputPath" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(CustomBeforeNuProjTargets)" Condition="'$(CustomBeforeNuProjTargets)' != '' and Exists('$(CustomBeforeNuProjTargets)')"/>

  <PropertyGroup>
    <NuProjRulesDir>$(MSBuildThisFileDirectory)Rules\</NuProjRulesDir>
  </PropertyGroup>

  <ItemGroup>
    <PropertyPageSchema Include="$(NuProjRulesDir)\ProjectItemsSchema.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(NuProjRulesDir)\scc.xaml;">
      <Context>Invisible</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(NuProjRulesDir)\general.xaml">
      <Context>Project;File</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(NuProjRulesDir)\general.browseobject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(NuProjRulesDir)\folder.xaml;
                                 $(NuProjRulesDir)\none.xaml;
                                 $(NuProjRulesDir)\content.xaml">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(NuProjRulesDir)\ResolvedProjectReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(NuProjRulesDir)\ProjectReference.xaml">
      <Context>;BrowseObject</Context>
    </PropertyPageSchema>

    <ProjectCapability Include="ProjectReferences;ReferencesFolder" />
    <ProjectCapability Include="ProjectConfigurationsDeclaredAsItems" />
    <ProjectCapability Include="NuProj" />
  </ItemGroup>

  <PropertyGroup>
    <AvailablePlatforms>Any CPU,x86,x64,ARM</AvailablePlatforms>
    <DefaultContentType>Content</DefaultContentType>
  </PropertyGroup>

  <PropertyGroup>
    <OutputType>package</OutputType>
    <TargetExt>.nupkg</TargetExt>
    <AssemblyName>$(Id)</AssemblyName>
    <TargetName Condition="'$(Version)' != ''">$(AssemblyName).$(Version)</TargetName>
    <TargetFrameworkVersion Condition=" '$(TargetFrameworkVersion)' == '' ">v4.5.1</TargetFrameworkVersion>
    <DebugSymbols>false</DebugSymbols>
    <_SymbolsPackageProduced>false</_SymbolsPackageProduced>
    <_SymbolsPackageProduced Condition="'$(GenerateSymbolPackage)'=='true'">true</_SymbolsPackageProduced>
  </PropertyGroup>

  <!--
      Properties relevant to Visual Studio:

      $(BuildingInsideVisualStudio)       This will indicate whether this project is building inside the IDE. When
                                          building via MSBuild, this property will not be set.

      $(DesignTimeBuild)                  Visual Studio uses this property to indicate whether it's performing a
                                          design time build or a full build. A design time build is designed to do
                                          minimal amount of work; the intent of those builds is to expose information
                                          around resolved dependencies and properties back to Visual Studio without
                                          actually producing assets on disk.
  -->

  <PropertyGroup>
    <!-- We don't want to build in case we're performing a design time build as we are expected to not
         produce any assets.

         We also don't want to build the references in cases where we build inside the IDE. The reason
         is that Visual Studio already built our dependencies. Doing it again can regress performance.
         However, the real issue is that it impacts correctness as this can result in building the same
         project simultaneously from different projects.

         Most particularly on the correctness side, this shows up when VS is doing a "rebuild". NuProj
         will end up causing multiple build breaks being reported because it will re-delete outputs that
         VS just produced and that other project references that are building in parallel now expect to
         be there. -->
    <BuildProjectReferences Condition="'$(BuildProjectReferences)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(DesignTimeBuild)' == 'true')">false</BuildProjectReferences>
    <!-- By default we will build (and if applicable, clean) all project references. But this can be used
         to disable that. -->
    <BuildProjectReferences Condition="'$(BuildProjectReferences)' == ''">true</BuildProjectReferences>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />

  <!-- For projects that want a per-project output directory, update OutDir and IntermediateOutputPath to include the project name. -->
  <PropertyGroup>
    <IntermediateOutputPathWasSpecified Condition=" '$(IntermediateOutputPath)'!='' and '$(IntermediateOutputPathWasSpecified)'=='' ">true</IntermediateOutputPathWasSpecified>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' != '' and '$(IntermediateOutputPathWasSpecified)' == 'true' and '$(GenerateProjectSpecificOutputFolder)' == 'true'">$(IntermediateOutputPath)$(ProjectName)\</IntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <BuildNuGet>True</BuildNuGet>
    <ExcludeTargetOutputInNuGetPackage>True</ExcludeTargetOutputInNuGetPackage>
    <ExcludeReferencesInNuGetPackage>True</ExcludeReferencesInNuGetPackage>
    <NuGetId>$(Id)</NuGetId>
    <NuGetVersion>$(Version)</NuGetVersion>
    <NuGetTitle>$(Title)</NuGetTitle>
    <NuGetAuthors>$(Authors)</NuGetAuthors>
    <NuGetOwners>$(Owners)</NuGetOwners>
    <NuGetDescription>$(Description)</NuGetDescription>
    <NuGetReleaseNotes>$(ReleaseNotes)</NuGetReleaseNotes>
    <NuGetSummary>$(Summary)</NuGetSummary>
    <NuGetLanguage>$(Language)</NuGetLanguage>
    <NuGetProjectUrl>$(ProjectUrl)</NuGetProjectUrl>
    <NuGetIconUrl>$(IconUrl)</NuGetIconUrl>
    <NuGetLicenseUrl>$(LicenseUrl)</NuGetLicenseUrl>
    <NuGetCopyright>$(Copyright)</NuGetCopyright>
    <NuGetRequireLicenseAcceptance>$(RequireLicenseAcceptance)</NuGetRequireLicenseAcceptance>
    <NuGetTags>$(Tags)</NuGetTags>
    <NuGetDevelopmentDependency>$(DevelopmentDependency)</NuGetDevelopmentDependency>
  </PropertyGroup>

  <PropertyGroup>
    <GetNuGetInfoDependsOn>_GenerateReferenceAssemblies;$(GetNuGetInfoDependsOn)</GetNuGetInfoDependsOn>
  </PropertyGroup>

  <Import Project="$(NuGetPackagingPath)\NuGet.Packaging.Common.targets"
          Condition="Exists('$(NuGetPackagingPath)\NuGet.Packaging.Common.targets')" />

  <UsingTask TaskName="NuGet.Packaging.Tasks.ApiIntersect" AssemblyFile="$(NuGetTasksPath)" />

  <PropertyGroup>
    <NuGetTargetFrameworkMoniker>any</NuGetTargetFrameworkMoniker>
  </PropertyGroup>

  <PropertyGroup>
    <PrepareForRunDependsOn></PrepareForRunDependsOn>
  </PropertyGroup>

  <Target Name="CoreCompile" />
  <Target Name="CreateManifestResourceNames" Condition="false" />

  <Target Name="_GenerateReferenceAssemblies" Condition=" '@(ReferenceAssemblyFramework)' != '' ">

    <ItemGroup>
      <_ProjectReferenceForReferenceAssembly
        Include="@(ProjectReference)"
        Condition="'%(ProjectReference.ReferenceOutputAssembly)' != 'False'" />
    </ItemGroup>

    <MSBuild
      Projects="@(_ProjectReferenceForReferenceAssembly)"
      Targets="GetTargetPath"
      Condition="('$(BuildingSolutionFile)'=='true' or '$(BuildingInsideVisualStudio)'=='true')">
      <Output TaskParameter="TargetOutputs" ItemName="IntersectionAssembly"/>
    </MSBuild>

    <ApiIntersect
      Framework="%(ReferenceAssemblyFramework.Identity)"
      OutputDirectory="$(IntermediateOutputPath)"
      IntersectionAssembly="@(IntersectionAssembly)"
      ToolPath="$(ApiIntersectToolPath)"
      ToolExe="$(ApiIntersectToolExe)">
    </ApiIntersect>
  </Target>

  <Import Project="$(CustomAfterNuProjTargets)" Condition="'$(CustomAfterNuProjTargets)' != '' and Exists('$(CustomAfterNuProjTargets)')"/>

</Project>
